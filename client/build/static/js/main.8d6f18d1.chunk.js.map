{"version":3,"sources":["components/LineChart.js","App.js","serviceWorker.js","index.js"],"names":["Plot","createPlotlyComponent","Plotly","formatDataPointsJson","unformattedDataPoints","formattedDataPoints","x","y","Object","keys","forEach","key","Number","date","Date","toLocaleTimeString","push","graphName","setdataPoints","a","fetch","then","res","json","fileData","LineChart","useParams","useState","dataPoints","useEffect","fetchFileData","to","data","type","mode","marker","color","layout","title","App","graphNames","setgraphNames","fetchFileNames","fileNames","path","children","map","i","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iSAOMA,E,MAAOC,GAAsBC,QAEnC,SAASC,EAAqBC,GAC7B,IAAIC,EAAsB,CAACC,EAAG,GAAIC,EAAG,IAcrC,OAZAC,OAAOC,KAAKL,GAAuBM,SAAQ,SAAAC,GAC1C,IAAIL,EAAIM,OAAOD,GAEXE,EAAO,IAAIC,KAAKR,GAAGS,qBAEvBV,EAAoBC,EAAEU,KAAKH,GAE3B,IAAIN,EAAIK,OAAOR,EAAsBO,IAErCN,EAAoBE,EAAES,KAAKT,MAGrBF,E,4CAKR,WAA6BY,EAAWC,GAAxC,eAAAC,EAAA,sEAEsBC,MAAM,cAAD,OAAeH,IACxCI,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAHlB,OAKCC,EAAWrB,EAHPqB,EAFL,QAOCN,EAAcM,GAPf,4C,sBAyCeC,MA/Bf,WAAsB,IAEfR,EAAcS,cAAdT,UAFc,EAIgBU,mBAAS,CAACrB,EAAG,GAAIC,EAAG,KAJpC,mBAIbqB,EAJa,KAIDV,EAJC,KAWpB,OAJAW,qBAAU,Y,sCACTC,CAAcb,EAAWC,KACvB,CAACD,IAGH,6BACC,kBAAC,IAAD,CAAMc,GAAG,KAAT,QAEA,kBAAC/B,EAAD,CACCgC,KAAM,CACN,CACC1B,EAAGsB,EAAWtB,EACdC,EAAGqB,EAAWrB,EACd0B,KAAM,UACNC,KAAM,gBACNC,OAAQ,CAACC,MAAO,SAGjBC,OAAQ,CAACC,MAAO,kCCjBLC,MArCf,WAAgB,IAAD,EAEuBZ,mBAAS,IAFhC,mBAENa,EAFM,KAEMC,EAFN,KAKPC,EAAc,uCAAG,4BAAAvB,EAAA,sEAEGC,MAAM,iBAC3BC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAHE,OAEfoB,EAFe,OAKrBF,EAAcE,GALO,2CAAH,qDAapB,OAJAd,qBAAU,WACRa,MACC,IAGD,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOE,KAAK,oBAAoBC,SAAU,kBAAC,EAAD,QAC1C,kBAAC,IAAD,CAAOD,KAAK,KACZ,4BACGJ,EAAWM,KAAI,SAAC7B,EAAW8B,GAC1B,OACE,4BACE,kBAAC,IAAD,CAAMhB,GAAE,iBAAYd,GAAaN,IAAKoC,GAAK9B,YCzBvC+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvC,MAAK,SAAAwC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8d6f18d1.chunk.js","sourcesContent":["  \r\n/* global Plotly:true */\r\n\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport createPlotlyComponent from 'react-plotly.js/factory'\r\n\r\nconst Plot = createPlotlyComponent(Plotly);\r\n \r\nfunction formatDataPointsJson(unformattedDataPoints) {\r\n\tvar formattedDataPoints = {x: [], y: []};\r\n\r\n\tObject.keys(unformattedDataPoints).forEach(key => {\r\n\t\tvar x = Number(key);\r\n\r\n\t\tvar date = new Date(x).toLocaleTimeString();\r\n\r\n\t\tformattedDataPoints.x.push(date);\r\n\r\n\t\tvar y = Number(unformattedDataPoints[key]);\r\n\r\n\t\tformattedDataPoints.y.push(y);\r\n\t});\r\n\r\n\treturn formattedDataPoints;\r\n}\r\n\r\n\r\n// Create async function for fetching graph file data\r\nasync function fetchFileData(graphName, setdataPoints) {\r\n\t// Use Fetch API to fetch '/api' endpoint\r\n\tvar fileData = await fetch(`/api/graph/${graphName}`)\r\n\t.then(res => res.json()) // process incoming data\r\n\t\r\n\tfileData = formatDataPointsJson(fileData);\r\n\r\n\tsetdataPoints(fileData)\r\n}\r\n\r\nfunction LineChart() {\r\n\r\n\tlet { graphName } = useParams();\r\n\r\n\tconst [dataPoints, setdataPoints] = useState({x: [], y: []})\r\n\r\n\t// Use useEffect to call fetchFileNames() on initial render\r\n\tuseEffect(() => {\r\n\t\tfetchFileData(graphName, setdataPoints)\r\n\t}, [graphName])\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Link to='/'>back</Link>\r\n\r\n\t\t\t<Plot\r\n\t\t\t\tdata={[\r\n\t\t\t\t{\r\n\t\t\t\t\tx: dataPoints.x,\r\n\t\t\t\t\ty: dataPoints.y,\r\n\t\t\t\t\ttype: 'scatter',\r\n\t\t\t\t\tmode: 'lines+markers',\r\n\t\t\t\t\tmarker: {color: 'red'},\r\n\t\t\t\t},\r\n\t\t\t\t]}\r\n\t\t\t\tlayout={{title: 'Light Levels by Time (UTC)'}}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default LineChart;","import React, { useEffect, useState } from 'react'\nimport './App.css';\nimport LineChart from './components/LineChart';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\nfunction App() {\n\n  const [graphNames, setgraphNames] = useState([])\n\n  // Create async function for fetching graph file names\n  const fetchFileNames = async () => {\n    // Use Fetch API to fetch '/api' endpoint\n    const fileNames = await fetch('/api/listdata')\n      .then(res => res.json()) // process incoming data\n    // Update welcomeMessage state\n    setgraphNames(fileNames)\n  }\n\n  // Use useEffect to call fetchFileNames() on initial render\n  useEffect(() => {\n    fetchFileNames()\n  }, [])\n\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/graph/:graphName\" children={<LineChart/>} />\n        <Route path=\"/\">\n        <ul>\n          {graphNames.map((graphName, i) => {     \n            return (\n              <li>\n                <Link to={`/graph/${graphName}`} key={i} >{graphName}</Link>\n              </li>\n            )})}\n        </ul>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}